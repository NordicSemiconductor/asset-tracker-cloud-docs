name: PR checks

on: pull_request

jobs:
  docker:
    name: Prepare Docker image
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.docker-image-tag.outputs.docker_image }}
    steps:
      - uses: actions/checkout@v2

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Determine Docker image name and tag
        id: docker-image-tag
        run: |
          DOCKER_REPO_NAME=`echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]'`
          DOCKER_CHECKSUM=`cat Dockerfile scripts/dot2svg.sh | sha256sum | awk '{ print $1 }' | tr -d '\n'`
          DOCKER_IMAGE=ghcr.io/${DOCKER_REPO_NAME}/graphviz:${DOCKER_CHECKSUM}
          echo "::set-output name=docker_image::${DOCKER_IMAGE}"
          echo "DOCKER_IMAGE=${DOCKER_IMAGE}" >> $GITHUB_ENV

      - name: Check if Docker image exists
        id: check-docker-image
        continue-on-error: true
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: docker manifest inspect ${{ env.DOCKER_IMAGE }}

      - name: Build Docker image
        if: steps.check-docker-image.outcome == 'failure'
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{ env.DOCKER_IMAGE }}
          push: true

  build:
    runs-on: ubuntu-latest

    needs: [docker]

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade --user pip setuptools
          python3 -m pip install --upgrade --user sphinx recommonmark sphinx_rtd_theme rstcheck

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Pull Docker image
        run: |
          docker pull ${{ needs.docker.outputs.docker_image }}
          echo "DOCKER_IMAGE=${{ needs.docker.outputs.docker_image }}" >> $GITHUB_ENV

      - name: Determine documentation release
        run: |
          echo "VERSION=${{ github.head_ref }}" >> $GITHUB_ENV
          echo "RELEASE=${{ github.sha }}" >> $GITHUB_ENV

      - name: Build docs
        run: |
          export PATH=$PATH:/home/runner/.local/bin
          make html

      - run: |
          export PATH=$PATH:/home/runner/.local/bin
          rstcheck -r ./

      - uses: actions/upload-artifact@v2
        with:
          name: asset-tracker-docs-${{ github.sha }}
          path: build/html/

  test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2
        with:
          ref: ${{ github.event.pull_request.head.sha }}

      - uses: actions/setup-node@v2
        with:
          node-version: "15.x"

      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}

      - name: Install dependencies
        run: npm ci --no-audit

      - name: Compile TypeScript
        run: npx tsc

      - name: Test
        run: npm test
