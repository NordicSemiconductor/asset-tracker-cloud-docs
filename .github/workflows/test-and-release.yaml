name: Test and Release

on:
  push:
    branches:
      - saga
      - "v*"

jobs:
  docker:
    name: Prepare Docker image
    runs-on: ubuntu-latest
    outputs:
      docker_image: ${{ steps.docker-image-tag.outputs.docker_image }}
    steps:
      - uses: actions/checkout@v2

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Determine Docker image name and tag
        id: docker-image-tag
        run: |
          DOCKER_REPO_NAME=`echo ${GITHUB_REPOSITORY} | tr '[:upper:]' '[:lower:]'`
          DOCKER_CHECKSUM=`cat Dockerfile scripts/dot2svg.sh | sha256sum | awk '{ print $1 }' | tr -d '\n'`
          DOCKER_IMAGE=ghcr.io/${DOCKER_REPO_NAME}/graphviz:${DOCKER_CHECKSUM}
          echo "::set-output name=docker_image::${DOCKER_IMAGE}"
          echo "DOCKER_IMAGE=${DOCKER_IMAGE}" >> $GITHUB_ENV

      - name: Check if Docker image exists
        id: check-docker-image
        continue-on-error: true
        env:
          DOCKER_CLI_EXPERIMENTAL: enabled
        run: docker manifest inspect ${{ env.DOCKER_IMAGE }}

      - name: Build Docker image
        if: steps.check-docker-image.outcome == 'failure'
        uses: docker/build-push-action@v2
        with:
          context: .
          tags: ${{ env.DOCKER_IMAGE }}
          push: true

  build:
    name: "Build the documentation"
    runs-on: ubuntu-latest

    needs: [docker]

    strategy:
      matrix:
        audience: [saga, v1.6.x, v1.5.x]

    steps:
      - uses: actions/checkout@v2

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade --user pip setuptools
          python3 -m pip install --upgrade --user sphinx recommonmark sphinx_rtd_theme

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Pull Docker image
        run: |
          docker pull ${{ needs.docker.outputs.docker_image }}
          echo "DOCKER_IMAGE=${{ needs.docker.outputs.docker_image }}" >> $GITHUB_ENV

      - name: Build docs
        run: |
          export PATH=$PATH:/home/runner/.local/bin
          export AUDIENCE=${{ matrix.audience }}
          # Remove Azure from v1.5.x builds
          if [[ "${{ matrix.audience }}" == "v1.5.x" ]]; then
            rm -r docs/azure
            cat index.rst | grep -v docs/azure > index-no-azure.rst
            mv index-no-azure.rst index.rst
          fi
          make html

      - uses: actions/upload-artifact@v2
        with:
          name: asset-tracker-docs-${{ matrix.audience }}-${{ github.sha }}
          path: build/html/

  test:
    name: "Run the tests"
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-node@v2
        with:
          node-version: "15.x"

      - name: Keep npm cache around to speed up installs
        uses: actions/cache@v2
        with:
          path: ~/.npm
          key: ${{ runner.OS }}-build-${{ hashFiles('**/package-lock.json') }}

      - run: npm ci --no-audit

      - run: npx tsc

      - run: npm test

  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [build, test]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/download-artifact@v2
      - name: Semantic release
        id: semantic-release
        continue-on-error: true
        run: npx semantic-release

  publish:
    name: Publish the documentation

    runs-on: ubuntu-latest

    needs: [build, test, release, docker]

    steps:
      - uses: actions/checkout@v2

      - name: Determine documentation release (saga)
        if: github.ref == 'refs/heads/saga' && github.event_name == 'push'
        run: |
          git pull --ff-only
          RELEASE=`git describe --abbrev=0 --tags --always | tr -d '\n'`
          echo "VERSION=saga" >> $GITHUB_ENV
          echo "RELEASE=$RELEASE" >> $GITHUB_ENV
          echo "AUDIENCE=saga" >> $GITHUB_ENV

      - name: Determine documentation release (maintenance branches)
        if: github.ref != 'refs/heads/saga' && github.event_name == 'push'
        run: |
          git pull --ff-only
          VERSION=`git rev-parse --abbrev-ref HEAD | tr -d 'refs/heads/' | tr -d '\n'`
          echo "VERSION=$VERSION" >> $GITHUB_ENV
          echo "RELEASE=${{ github.sha }}" >> $GITHUB_ENV
          echo "AUDIENCE=$VERSION" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          python3 -m pip install --upgrade --user pip setuptools
          python3 -m pip install --upgrade --user sphinx recommonmark sphinx_rtd_theme

      - name: Login to GHCR
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.CR_PAT }}

      - name: Pull Docker image
        run: |
          docker pull ${{ needs.docker.outputs.docker_image }}
          echo "DOCKER_IMAGE=${{ needs.docker.outputs.docker_image }}" >> $GITHUB_ENV

      - name: Build documentation
        if:
          env.RELEASE != '' && env.VERSION != '' && github.event_name == 'push'
        run: |
          echo "Updating documentation for version ${{ env.VERSION }} release ${{ env.RELEASE }}...";
          export PATH=$PATH:/home/runner/.local/bin
          # Remove Azure from v1.5.x builds
          if [[ "${AUDIENCE}" == "v1.5.x" ]]; then
            rm -r docs/azure
            cat index.rst | grep -v docs/azure > index-no-azure.rst
            mv index-no-azure.rst index.rst
            rm -r docs/firmware/azure
            cat docs/firmware/Index.rst | grep -v azure/ > docs/firmware/Index-no-azure.rst
            mv docs/firmware/Index-no-azure.rst docs/firmware/Index.rst
          fi
          # Generate Documentation
          make html
          # Clone gh-pages branch
          git clone --single-branch --branch gh-pages https://github.com/${GITHUB_REPOSITORY} asset-tracker-docs
          git -C asset-tracker-docs rm -r ${{ env.VERSION }}/\*
          mkdir -p asset-tracker-docs/${{ env.VERSION }}
          cp -r build/html/* asset-tracker-docs/${{ env.VERSION }}
          # Maintain legacy URLs
          if [[ "${{ env.VERSION }}" == "v1.5.x" ]]; then
            REDIRECT=./GettingStarted/Index.html node scripts/redirect.mjs > asset-tracker-docs/${{ env.VERSION }}/docs/aws/GettingStarted.html
            mkdir asset-tracker-docs/${{ env.VERSION }}/docs/device-cloud-protocol
            REDIRECT=../guides/FourKindsOfData.html node scripts/redirect.mjs > asset-tracker-docs/${{ env.VERSION }}/docs/device-cloud-protocol/FourKindsOfData.html
          fi;
          git -C asset-tracker-docs add -A ${{ env.VERSION }}
          if [[ `git -C asset-tracker-docs status --porcelain` ]]; then
            echo "HAS_CHANGES=1" >> $GITHUB_ENV
            git -C asset-tracker-docs status
          else
            echo "HAS_CHANGES=0" >> $GITHUB_ENV
            echo "No changes."
          fi

      - name: Publish documentation
        if: env.HAS_CHANGES == '1'
        run: |
          cd asset-tracker-docs
          echo "machine github.com login accesskey password ${{ secrets.GITHUB_TOKEN }}" > ~/.netrc
          git config --global user.email "actions@example.com"
          git config --global user.name "GitHub Actions"
          touch .nojekyll
          git add .nojekyll
          git commit -m "docs(${{ env.VERSION }}): update documentation for release ${{ env.RELEASE }}"
          git pull --ff-only
          git push
